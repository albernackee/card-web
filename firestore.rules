service cloud.firestore {
  match /databases/{database}/documents {

    function userIsAdmin() {
      return request.auth.uid == 'TPo5MOn6rNX9k8K1bbejuBNk4Dr2' || request.auth.uid == 'KteKDU7UnHfkLcXAyZXbQ6kRAk13';
    }
    
    function editOnlyUpdatesTimestamp(key) {
      return request.writeFields.hasOnly([key]) && request.resource.data[key] == request.time;
    }

    function editOnlyIncrementsAndUpdatesTimestamp(incrementKey, timestampKey) {
      return request.writeFields.hasOnly([incrementKey, timestampKey]) && request.resource.data[timestampKey] == request.time && resource.data[incrementKey] + 1 == request.resource.data[incrementKey]
    }

    function editOnlyAddsMessage() {
      return request.writeFields.hasOnly(['messages', 'updated']) && request.resource.data.messages.size() == resource.data.messages.size() + 1 && request.resource.data.messages[0:resource.data.messages.size()] == resource.data.messages;
    }
        
    function editOnlyIncrements(key) {
      return request.writeFields.hasOnly([key]) && resource.data[key] + 1 == request.resource.data[key];
    }
    
    function editOnlyIncrementsOrDecrements(key) {
      return request.writeFields.hasOnly([key]) && (resource.data[key] + 1 == request.resource.data[key] || resource.data[key] - 1 == request.resource.data[key]);
    }
    
    function editOnlyIncrementsAndDecrements(incKey, decKey) {
      return request.writeFields.hasOnly([incKey, decKey]) && resource.data[decKey] - 1 == request.resource.data[decKey] && resource.data[incKey] + 1 == request.resource.data[incKey];
    }
    
    function loggedIn() {
      return request.auth.uid != null;
    }
    
    function createIsOwner() {
      return loggedIn() && request.auth.uid == request.resource.data.owner;
    }
    
    function createIsAuthor() {
      return loggedIn() && request.auth.uid == request.resource.data.author;
    }
    
    function updateIsOwner() {
      return loggedIn() && request.auth.uid == resource.data.owner;
    }
    
    function updateIsAuthor() {
      return loggedIn() && request.auth.uid == resource.data.author;
    }

    match /{document=**} {
      allow read: if userIsAdmin();
      allow write: if userIsAdmin();
    }

    match /sections/{section} {
      allow read: if true;
    }

    match /tags/{tag} {
      allow read: if true;
    }
    
    match /authors/{author} {
      allow read: if true;
      allow write: if request.auth.uid == author;
    }

    match /users/{user} {
      allow read: if request.auth.uid == user;
      allow write: if request.auth.uid == user;
    }
    
    match /cards/{card} {
      allow read: if true;
      allow update: if loggedIn() && (editOnlyIncrements('thread_count') || editOnlyIncrementsAndDecrements('thread_resolved_count', 'thread_count') || editOnlyIncrementsOrDecrements('star_count') || editOnlyUpdatesTimestamp('updated_message') || editOnlyIncrementsAndUpdatesTimestamp('thread_count', 'updated_message'));
    }
    
    match /messages/{message} {
      allow read: if true;
      allow create: if createIsAuthor();
      allow update: if updateIsAuthor();
    }
    
    match /threads/{thread} {
      allow read: if true;
      allow create : if createIsAuthor();
      allow update : if updateIsAuthor() || (loggedIn() && editOnlyAddsMessage());
    }
    
    match /stars/{star} {
      allow create: if createIsOwner();
      allow update: if updateIsOwner();
      allow delete: if updateIsOwner();
      allow read: if updateIsOwner();
    }

    match /reads/{read} {
      allow create: if createIsOwner();
      allow update: if updateIsOwner();
      allow delete: if updateIsOwner();
      allow read: if updateIsOwner();
    }

    match /reading_lists/{document=**} {
      allow create: if createIsOwner();
      allow update: if updateIsOwner();
      allow delete: if updateIsOwner();
      allow read: if updateIsOwner();
    }
  }
}
